#!/usr/bin/env php
<?php

declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../config/config.php';

use React\EventLoop\Loop;
use React\Http\Browser;
use React\Promise\Promise;
use Psr\Http\Message\ResponseInterface;

class AsyncOrderCancellation
{
    private string $tradeServerUrl;
    private Browser $browser;

    public function __construct()
    {
        $this->tradeServerUrl = Config::getTradeServerUrl();
        $this->browser = new Browser();
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
     */
    private function cancelOrder(int $orderId, string $pair): Promise
    {
        $body = [
            'method' => 'order.cancel',
            'params' => [Config::BOT_USER_ID, $pair, $orderId],
            'id' => 1,
        ];

        return $this->browser->post($this->tradeServerUrl, [
            'Content-Type' => 'application/json'
        ], json_encode($body))
        ->then(
            function (ResponseInterface $response) use ($orderId) {
                $result = json_decode((string) $response->getBody(), true);
                echo "‚úÖ –û—Ä–¥–µ—Ä {$orderId} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n";
                return $result;
            },
            function (\Exception $e) use ($orderId) {
                echo "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ {$orderId}: " . $e->getMessage() . "\n";
                throw $e;
            }
        );
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
     */
    private function getOpenOrders(string $pair): Promise
    {
        $body = [
            'method' => 'order.pending',
            'params' => [Config::BOT_USER_ID, $pair, 0, 100],
            'id' => 1,
        ];

        return $this->browser->post($this->tradeServerUrl, [
            'Content-Type' => 'application/json'
        ], json_encode($body))
        ->then(
            function (ResponseInterface $response) {
                $result = json_decode((string) $response->getBody(), true);
                if (isset($result['result']['records'])) {
                    return $result['result']['records'];
                }
                throw new \Exception('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä—ñ–≤');
            }
        );
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è –ø–∞—Ä–∏
     */
    public function cancelAllOrders(string $pair): void
    {
        echo "üîÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è –ø–∞—Ä–∏ {$pair}...\n";

        $this->getOpenOrders($pair)
            ->then(function ($orders) use ($pair) {
                echo "üìã –ó–Ω–∞–π–¥–µ–Ω–æ " . count($orders) . " –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤\n";
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –ø—Ä–æ–º—ñ—Å—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                $promises = array_map(
                    fn($order) => $this->cancelOrder($order['id'], $pair),
                    $orders
                );
                
                // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–∫–∞—Å—É–≤–∞–Ω—å
                \React\Promise\all($promises)->then(
                    function () {
                        echo "‚ú® –í—Å—ñ –æ—Ä–¥–µ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n";
                        Loop::stop();
                    },
                    function (\Exception $e) {
                        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤: " . $e->getMessage() . "\n";
                        Loop::stop();
                    }
                );
            });

        Loop::run();
    }
}

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if (count($argv) < 2) {
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: php AsyncOrderCancellation.php PAIR\n";
    echo "–ü—Ä–∏–∫–ª–∞–¥: php AsyncOrderCancellation.php LTC_USDT\n";
    exit(1);
}

$pair = $argv[1];
$cancellation = new AsyncOrderCancellation();
$cancellation->cancelAllOrders($pair); 